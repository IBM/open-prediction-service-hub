#!/usr/bin/env python3
#
# Copyright 2020 IBM
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.IBM Confidential
#
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.link import Link  # noqa: F401,E501
from swagger_server import util


class MachineLearningModelEndpoint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, status: str=None, deployed_at: datetime=None, links: List[Link]=None):  # noqa: E501
        """MachineLearningModelEndpoint - a model defined in Swagger

        :param id: The id of this MachineLearningModelEndpoint.  # noqa: E501
        :type id: str
        :param name: The name of this MachineLearningModelEndpoint.  # noqa: E501
        :type name: str
        :param status: The status of this MachineLearningModelEndpoint.  # noqa: E501
        :type status: str
        :param deployed_at: The deployed_at of this MachineLearningModelEndpoint.  # noqa: E501
        :type deployed_at: datetime
        :param links: The links of this MachineLearningModelEndpoint.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'status': str,
            'deployed_at': datetime,
            'links': List[Link]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'deployed_at': 'deployed_at',
            'links': 'links'
        }
        self._id = id
        self._name = name
        self._status = status
        self._deployed_at = deployed_at
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'MachineLearningModelEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineLearningModelEndpoint of this MachineLearningModelEndpoint.  # noqa: E501
        :rtype: MachineLearningModelEndpoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this MachineLearningModelEndpoint.

        ID of Version  # noqa: E501

        :return: The id of this MachineLearningModelEndpoint.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MachineLearningModelEndpoint.

        ID of Version  # noqa: E501

        :param id: The id of this MachineLearningModelEndpoint.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this MachineLearningModelEndpoint.

        Name of Version  # noqa: E501

        :return: The name of this MachineLearningModelEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MachineLearningModelEndpoint.

        Name of Version  # noqa: E501

        :param name: The name of this MachineLearningModelEndpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this MachineLearningModelEndpoint.

        Status of endpoint  # noqa: E501

        :return: The status of this MachineLearningModelEndpoint.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this MachineLearningModelEndpoint.

        Status of endpoint  # noqa: E501

        :param status: The status of this MachineLearningModelEndpoint.
        :type status: str
        """
        allowed_values = ["out_of_service", "creating", "updating", "under_maintenance", "rolling_back", "in_service", "deleting", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def deployed_at(self) -> datetime:
        """Gets the deployed_at of this MachineLearningModelEndpoint.

        date of the Version  # noqa: E501

        :return: The deployed_at of this MachineLearningModelEndpoint.
        :rtype: datetime
        """
        return self._deployed_at

    @deployed_at.setter
    def deployed_at(self, deployed_at: datetime):
        """Sets the deployed_at of this MachineLearningModelEndpoint.

        date of the Version  # noqa: E501

        :param deployed_at: The deployed_at of this MachineLearningModelEndpoint.
        :type deployed_at: datetime
        """
        if deployed_at is None:
            raise ValueError("Invalid value for `deployed_at`, must not be `None`")  # noqa: E501

        self._deployed_at = deployed_at

    @property
    def links(self) -> List[Link]:
        """Gets the links of this MachineLearningModelEndpoint.

        optional array of typed linked resources  # noqa: E501

        :return: The links of this MachineLearningModelEndpoint.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this MachineLearningModelEndpoint.

        optional array of typed linked resources  # noqa: E501

        :param links: The links of this MachineLearningModelEndpoint.
        :type links: List[Link]
        """

        self._links = links
