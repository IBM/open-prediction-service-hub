# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Feature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, order: int=None, type: str=None):  # noqa: E501
        """Feature - a model defined in Swagger

        :param name: The name of this Feature.  # noqa: E501
        :type name: str
        :param order: The order of this Feature.  # noqa: E501
        :type order: int
        :param type: The type of this Feature.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'name': str,
            'order': int,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'order': 'order',
            'type': 'type'
        }
        self._name = name
        self._order = order
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Feature of this Feature.  # noqa: E501
        :rtype: Feature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Feature.

        name of the feature  # noqa: E501

        :return: The name of this Feature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Feature.

        name of the feature  # noqa: E501

        :param name: The name of this Feature.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def order(self) -> int:
        """Gets the order of this Feature.

        Position of feature in method signature  # noqa: E501

        :return: The order of this Feature.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order: int):
        """Sets the order of this Feature.

        Position of feature in method signature  # noqa: E501

        :param order: The order of this Feature.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def type(self) -> str:
        """Gets the type of this Feature.

        type of feature. Can be python type or numpy type  # noqa: E501

        :return: The type of this Feature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Feature.

        type of feature. Can be python type or numpy type  # noqa: E501

        :param type: The type of this Feature.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
