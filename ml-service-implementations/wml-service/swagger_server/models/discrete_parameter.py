# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.parameter import Parameter
from swagger_server import util


class DiscreteParameter(Parameter):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, value: int=None, realtype: str=None):  # noqa: E501
        """DiscreteParameter - a model defined in Swagger

        :param name: The name of this DiscreteParameter.  # noqa: E501
        :type name: str
        :param value: The value of this DiscreteParameter.  # noqa: E501
        :type value: int
        :param realtype: The realtype of this DiscreteParameter.  # noqa: E501
        :type realtype: str
        """
        self.swagger_types = {
            'name': str,
            'value': int,
            'realtype': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'realtype': 'realtype'
        }
        self._name = name
        self._value = value
        self._realtype = realtype

    @classmethod
    def from_dict(cls, dikt) -> 'DiscreteParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiscreteParameter of this DiscreteParameter.  # noqa: E501
        :rtype: DiscreteParameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DiscreteParameter.

        Name of the feature  # noqa: E501

        :return: The name of this DiscreteParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DiscreteParameter.

        Name of the feature  # noqa: E501

        :param name: The name of this DiscreteParameter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> int:
        """Gets the value of this DiscreteParameter.

        Name of the numerical feature  # noqa: E501

        :return: The value of this DiscreteParameter.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this DiscreteParameter.

        Name of the numerical feature  # noqa: E501

        :param value: The value of this DiscreteParameter.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def realtype(self) -> str:
        """Gets the realtype of this DiscreteParameter.


        :return: The realtype of this DiscreteParameter.
        :rtype: str
        """
        return self._realtype

    @realtype.setter
    def realtype(self, realtype: str):
        """Sets the realtype of this DiscreteParameter.


        :param realtype: The realtype of this DiscreteParameter.
        :type realtype: str
        """
        if realtype is None:
            raise ValueError("Invalid value for `realtype`, must not be `None`")  # noqa: E501

        self._realtype = realtype
