#!/usr/bin/env python3
#
# Copyright 2020 IBM
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.IBM Confidential
#
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServerStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, error: str=None):  # noqa: E501
        """ServerStatus - a model defined in Swagger

        :param status: The status of this ServerStatus.  # noqa: E501
        :type status: str
        :param error: The error of this ServerStatus.  # noqa: E501
        :type error: str
        """
        self.swagger_types = {
            'status': str,
            'error': str
        }

        self.attribute_map = {
            'status': 'status',
            'error': 'error'
        }
        self._status = status
        self._error = error

    @classmethod
    def from_dict(cls, dikt) -> 'ServerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerStatus of this ServerStatus.  # noqa: E501
        :rtype: ServerStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ServerStatus.

        Status of the service  # noqa: E501

        :return: The status of this ServerStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ServerStatus.

        Status of the service  # noqa: E501

        :param status: The status of this ServerStatus.
        :type status: str
        """
        allowed_values = ["ok", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error(self) -> str:
        """Gets the error of this ServerStatus.

        Error if status in error  # noqa: E501

        :return: The error of this ServerStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this ServerStatus.

        Error if status in error  # noqa: E501

        :param error: The error of this ServerStatus.
        :type error: str
        """

        self._error = error
