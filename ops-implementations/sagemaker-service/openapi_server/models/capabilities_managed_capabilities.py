# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CapabilitiesManagedCapabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supported_input_data_structure=None, supported_output_data_structure=None, supported_binary_format=None, supported_upload_format=None, file_size_limit=0):  # noqa: E501
        """CapabilitiesManagedCapabilities - a model defined in OpenAPI

        :param supported_input_data_structure: The supported_input_data_structure of this CapabilitiesManagedCapabilities.  # noqa: E501
        :type supported_input_data_structure: List[str]
        :param supported_output_data_structure: The supported_output_data_structure of this CapabilitiesManagedCapabilities.  # noqa: E501
        :type supported_output_data_structure: List[str]
        :param supported_binary_format: The supported_binary_format of this CapabilitiesManagedCapabilities.  # noqa: E501
        :type supported_binary_format: List[str]
        :param supported_upload_format: The supported_upload_format of this CapabilitiesManagedCapabilities.  # noqa: E501
        :type supported_upload_format: List[str]
        :param file_size_limit: The file_size_limit of this CapabilitiesManagedCapabilities.  # noqa: E501
        :type file_size_limit: int
        """
        self.openapi_types = {
            'supported_input_data_structure': List[str],
            'supported_output_data_structure': List[str],
            'supported_binary_format': List[str],
            'supported_upload_format': List[str],
            'file_size_limit': int
        }

        self.attribute_map = {
            'supported_input_data_structure': 'supported_input_data_structure',
            'supported_output_data_structure': 'supported_output_data_structure',
            'supported_binary_format': 'supported_binary_format',
            'supported_upload_format': 'supported_upload_format',
            'file_size_limit': 'file_size_limit'
        }

        self._supported_input_data_structure = supported_input_data_structure
        self._supported_output_data_structure = supported_output_data_structure
        self._supported_binary_format = supported_binary_format
        self._supported_upload_format = supported_upload_format
        self._file_size_limit = file_size_limit

    @classmethod
    def from_dict(cls, dikt) -> 'CapabilitiesManagedCapabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Capabilities_managed_capabilities of this CapabilitiesManagedCapabilities.  # noqa: E501
        :rtype: CapabilitiesManagedCapabilities
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supported_input_data_structure(self):
        """Gets the supported_input_data_structure of this CapabilitiesManagedCapabilities.


        :return: The supported_input_data_structure of this CapabilitiesManagedCapabilities.
        :rtype: List[str]
        """
        return self._supported_input_data_structure

    @supported_input_data_structure.setter
    def supported_input_data_structure(self, supported_input_data_structure):
        """Sets the supported_input_data_structure of this CapabilitiesManagedCapabilities.


        :param supported_input_data_structure: The supported_input_data_structure of this CapabilitiesManagedCapabilities.
        :type supported_input_data_structure: List[str]
        """

        self._supported_input_data_structure = supported_input_data_structure

    @property
    def supported_output_data_structure(self):
        """Gets the supported_output_data_structure of this CapabilitiesManagedCapabilities.


        :return: The supported_output_data_structure of this CapabilitiesManagedCapabilities.
        :rtype: List[str]
        """
        return self._supported_output_data_structure

    @supported_output_data_structure.setter
    def supported_output_data_structure(self, supported_output_data_structure):
        """Sets the supported_output_data_structure of this CapabilitiesManagedCapabilities.


        :param supported_output_data_structure: The supported_output_data_structure of this CapabilitiesManagedCapabilities.
        :type supported_output_data_structure: List[str]
        """

        self._supported_output_data_structure = supported_output_data_structure

    @property
    def supported_binary_format(self):
        """Gets the supported_binary_format of this CapabilitiesManagedCapabilities.


        :return: The supported_binary_format of this CapabilitiesManagedCapabilities.
        :rtype: List[str]
        """
        return self._supported_binary_format

    @supported_binary_format.setter
    def supported_binary_format(self, supported_binary_format):
        """Sets the supported_binary_format of this CapabilitiesManagedCapabilities.


        :param supported_binary_format: The supported_binary_format of this CapabilitiesManagedCapabilities.
        :type supported_binary_format: List[str]
        """

        self._supported_binary_format = supported_binary_format

    @property
    def supported_upload_format(self):
        """Gets the supported_upload_format of this CapabilitiesManagedCapabilities.


        :return: The supported_upload_format of this CapabilitiesManagedCapabilities.
        :rtype: List[str]
        """
        return self._supported_upload_format

    @supported_upload_format.setter
    def supported_upload_format(self, supported_upload_format):
        """Sets the supported_upload_format of this CapabilitiesManagedCapabilities.


        :param supported_upload_format: The supported_upload_format of this CapabilitiesManagedCapabilities.
        :type supported_upload_format: List[str]
        """

        self._supported_upload_format = supported_upload_format

    @property
    def file_size_limit(self):
        """Gets the file_size_limit of this CapabilitiesManagedCapabilities.

        Maximum length of model file in bytes. 0 means no limit.  # noqa: E501

        :return: The file_size_limit of this CapabilitiesManagedCapabilities.
        :rtype: int
        """
        return self._file_size_limit

    @file_size_limit.setter
    def file_size_limit(self, file_size_limit):
        """Sets the file_size_limit of this CapabilitiesManagedCapabilities.

        Maximum length of model file in bytes. 0 means no limit.  # noqa: E501

        :param file_size_limit: The file_size_limit of this CapabilitiesManagedCapabilities.
        :type file_size_limit: int
        """
        if file_size_limit is not None and file_size_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `file_size_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._file_size_limit = file_size_limit
