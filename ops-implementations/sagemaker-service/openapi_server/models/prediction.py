# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.link import Link  # noqa: F401,E501
from openapi_server.models.parameter import Parameter  # noqa: F401,E501
from openapi_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, target: List[Link]=None, parameters: List[Parameter]=None):  # noqa: E501
        """Prediction - a model defined in Swagger

        :param target: The target of this Prediction.  # noqa: E501
        :type target: List[Link]
        :param parameters: The parameters of this Prediction.  # noqa: E501
        :type parameters: List[Parameter]
        """
        self.swagger_types = {
            'target': List[Link],
            'parameters': List[Parameter]
        }

        self.attribute_map = {
            'target': 'target',
            'parameters': 'parameters'
        }
        self._target = target
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Prediction of this Prediction.  # noqa: E501
        :rtype: Prediction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self) -> List[Link]:
        """Gets the target of this Prediction.

        Add at least a relation to an `endpoint`to be able to call the correct prediction. Eventually add also a `model` in case endpoints contains multiple models.  # noqa: E501

        :return: The target of this Prediction.
        :rtype: List[Link]
        """
        return self._target

    @target.setter
    def target(self, target: List[Link]):
        """Sets the target of this Prediction.

        Add at least a relation to an `endpoint`to be able to call the correct prediction. Eventually add also a `model` in case endpoints contains multiple models.  # noqa: E501

        :param target: The target of this Prediction.
        :type target: List[Link]
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def parameters(self) -> List[Parameter]:
        """Gets the parameters of this Prediction.

        Model parameters  # noqa: E501

        :return: The parameters of this Prediction.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[Parameter]):
        """Sets the parameters of this Prediction.

        Model parameters  # noqa: E501

        :param parameters: The parameters of this Prediction.
        :type parameters: List[Parameter]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
