# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.model import Model
from openapi_server import util

from openapi_server.models.model import Model  # noqa: E501

class Models(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models=None, total_count=None):  # noqa: E501
        """Models - a model defined in OpenAPI

        :param models: The models of this Models.  # noqa: E501
        :type models: List[Model]
        :param total_count: The total_count of this Models.  # noqa: E501
        :type total_count: int
        """
        self.openapi_types = {
            'models': List[Model],
            'total_count': int
        }

        self.attribute_map = {
            'models': 'models',
            'total_count': 'total_count'
        }

        self._models = models
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt) -> 'Models':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Models of this Models.  # noqa: E501
        :rtype: Models
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this Models.

        List of models  # noqa: E501

        :return: The models of this Models.
        :rtype: List[Model]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Models.

        List of models  # noqa: E501

        :param models: The models of this Models.
        :type models: List[Model]
        """

        self._models = models

    @property
    def total_count(self):
        """Gets the total_count of this Models.

        Total numer of items. Computed explicitly only when 'total_count=true' query parameter is present.  # noqa: E501

        :return: The total_count of this Models.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Models.

        Total numer of items. Computed explicitly only when 'total_count=true' query parameter is present.  # noqa: E501

        :param total_count: The total_count of this Models.
        :type total_count: int
        """

        self._total_count = total_count
